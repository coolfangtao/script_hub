import streamlit as st
import pandas as pd
import akshare as ak
import plotly.graph_objects as go
from datetime import datetime, timedelta, time
from shared.sidebar import create_common_sidebar # <-- 1. ÂØºÂÖ•ÂáΩÊï∞
create_common_sidebar() # <-- 2. Ë∞ÉÁî®ÂáΩÊï∞ÔºåÁ°Æ‰øùÊØè‰∏™È°µÈù¢ÈÉΩÊúâ‰æßËæπÊ†è

# --- Ê†∏ÂøÉÈÖçÁΩÆ ---
st.set_page_config(
    page_title="‰∏≠ÂõΩËÇ°Â∏ÇÊùøÂùóÂÆûÊó∂ÁõëÊéß",
    page_icon="üìà",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# ÂÆö‰πâÊàë‰ª¨ÊÑüÂÖ¥Ë∂£ÁöÑÊùøÂùóÂèäÂÖ∂ÂØπÂ∫îÁöÑÊùøÂùó‰ª£Á†Å
TARGET_SECTORS = {
    "ÂõΩÈò≤ÂÜõÂ∑•": "BK0548",
    "ÂçäÂØº‰Ωì‰∫ß‰∏ö": "BK1031",
    "‰∫∫Â∑•Êô∫ËÉΩ": "BK0855",
    "Á®ÄÂúüÊ∞∏Á£Å": "BK0483"
}


# --- Êï∞ÊçÆÂ§ÑÁêÜÂáΩÊï∞ ---

def is_trading_time():
    """Ê£ÄÊü•ÂΩìÂâçÊòØÂê¶‰∏∫AËÇ°‰∫§ÊòìÊó∂Èó¥"""
    now = datetime.now()
    if now.weekday() >= 5: return False
    now_time = now.time()
    is_morning = time(9, 30) <= now_time <= time(11, 30)
    is_afternoon = time(13, 0) <= now_time <= time(15, 0)
    return is_morning or is_afternoon


@st.cache_data(ttl=60)
def fetch_data():
    """Êô∫ËÉΩÊï∞ÊçÆËé∑ÂèñÂáΩÊï∞"""
    if is_trading_time():
        return fetch_live_data()
    else:
        return fetch_latest_closing_data()


def fetch_live_data():
    """Âú®‰∫§ÊòìÊó∂Èó¥ÂÜÖËé∑ÂèñÂÆûÊó∂Êï∞ÊçÆ"""
    try:
        spot_df = ak.stock_board_concept_spot_em()
        target_df = spot_df[spot_df['‰ª£Á†Å'].isin(TARGET_SECTORS.values())].copy()

        history_list = []
        end_date = datetime.now().strftime('%Y%m%d')
        start_date = (datetime.now() - timedelta(days=60)).strftime('%Y%m%d')
        for code in target_df['‰ª£Á†Å']:
            hist_df = ak.stock_board_concept_hist_em(symbol=code, start_date=start_date, end_date=end_date)
            # --- „ÄêÂêåÊ†∑Â¢ûÂä†ÂÆâÂÖ®Ê£ÄÊü•„Äë ---
            history_list.append(hist_df['Êî∂Áõò'].tolist() if not hist_df.empty else [])

        target_df['history'] = history_list
        target_df = target_df.rename(columns={'ÂêçÁß∞': 'name', '‰ª£Á†Å': 'code', 'ÊúÄÊñ∞‰ª∑': 'price', 'Ê∂®Ë∑åÂπÖ': 'change_rate'})
        return target_df[['name', 'code', 'price', 'change_rate', 'history']]
    except Exception as e:
        st.error(f"Ëé∑ÂèñÂÆûÊó∂Êï∞ÊçÆÂ§±Ë¥•: {e}. Â∞ÜÂ∞ùËØïËé∑ÂèñÊî∂ÁõòÊï∞ÊçÆ„ÄÇ")
        return fetch_latest_closing_data()


def fetch_latest_closing_data():
    """Âú®Èùû‰∫§ÊòìÊó∂Èó¥Ëé∑ÂèñÊúÄËøë‰∫§ÊòìÊó•ÁöÑÊî∂ÁõòÊï∞ÊçÆ"""
    all_data = []
    end_date = datetime.now().strftime('%Y%m%d')
    start_date = (datetime.now() - timedelta(days=90)).strftime('%Y%m%d')

    for name, code in TARGET_SECTORS.items():
        try:
            hist_df = ak.stock_board_concept_hist_em(symbol=code, start_date=start_date, end_date=end_date)

            # --- „ÄêÂÖ≥ÈîÆ‰øÆÊîπ„ÄëÂú®ËøôÈáåÂ¢ûÂä†ÂÆâÂÖ®Ê£ÄÊü• ---
            # Âè™ÊúâÂΩìËøîÂõûÁöÑhist_df‰∏çÊòØÁ©∫ÁöÑÊó∂ÂÄôÔºåÊâçÊâßË°åÂêéÁª≠Êìç‰Ωú
            if not hist_df.empty:
                latest_data = hist_df.iloc[-1]
                all_data.append({
                    "name": name,
                    "code": code,
                    "price": latest_data['Êî∂Áõò'],
                    "change_rate": latest_data['Ê∂®Ë∑åÂπÖ'],
                    "history": hist_df['Êî∂Áõò'].tail(60).tolist()
                })
            else:
                # Â¶ÇÊûúÊòØÁ©∫ÁöÑÔºåÂ∞±ÊâìÂç∞‰∏Ä‰∏™Ë≠¶ÂëäÔºåÁÑ∂ÂêéÁªßÁª≠Â§ÑÁêÜ‰∏ã‰∏Ä‰∏™ÊùøÂùó
                st.warning(f"Êú™ËÉΩËé∑ÂèñÊùøÂùó '{name}' ÁöÑÂéÜÂè≤Êï∞ÊçÆÔºåÊï∞ÊçÆÊ∫êÂèØËÉΩÊöÇÊó∂‰∏çÂèØÁî®„ÄÇ")

        except Exception as e:
            st.warning(f"Â§ÑÁêÜÊùøÂùó '{name}' Êó∂ÂèëÁîüÈîôËØØ: {e}")

    return pd.DataFrame(all_data)


# --- ÁïåÈù¢Ê∏≤ÊüìÂáΩÊï∞ (Ê≠§ÈÉ®ÂàÜÊó†ÂèòÂåñ) ---
def create_sparkline(data, is_positive):
    if not data or len(data) < 2: return go.Figure()
    color = "#d62728" if is_positive else "#2ca02c"
    fig = go.Figure(go.Scatter(
        y=data, mode='lines', line=dict(color=color, width=2), fill='tozeroy',
        fillcolor='rgba(214, 39, 40, 0.1)' if is_positive else 'rgba(44, 160, 44, 0.1)'
    ))
    fig.update_layout(
        showlegend=False, xaxis=dict(visible=False), yaxis=dict(visible=False),
        margin=dict(l=0, r=0, t=0, b=0), height=60,
        plot_bgcolor='rgba(0,0,0,0)', paper_bgcolor='rgba(0,0,0,0)'
    )
    return fig


def display_dashboard(df):
    st.title("üìà ‰∏≠ÂõΩËÇ°Â∏ÇÊùøÂùóÁõëÊéß")
    if is_trading_time():
        st.caption(f"ÂΩìÂâçÊòæÁ§∫‰∏∫ **ÂÆûÊó∂Ë°åÊÉÖ** (Ëá™Âä®Âà∑Êñ∞‰∏≠, ÊúÄÂêéÊõ¥Êñ∞: {datetime.now().strftime('%H:%M:%S')})")
    else:
        st.caption(f"ÂΩìÂâç‰∏∫Èùû‰∫§ÊòìÊó∂ÊÆµÔºåÊòæÁ§∫ **ÊúÄËøë‰∫§ÊòìÊó•Êî∂ÁõòÊï∞ÊçÆ**")
    if df.empty:
        st.warning("Êú™ËÉΩËé∑ÂèñÂà∞‰ªª‰ΩïÊùøÂùóÊï∞ÊçÆÔºåËØ∑Á®çÂêéÂà∑Êñ∞ÊàñÊ£ÄÊü•ÁΩëÁªú„ÄÇ")
        return
    df['name'] = pd.Categorical(df['name'], categories=TARGET_SECTORS.keys(), ordered=True)
    df = df.sort_values('name')
    for _, row in df.iterrows():
        name, code, price, change_rate, history = row['name'], row['code'], row['price'], row['change_rate'], row[
            'history']
        is_positive = change_rate >= 0
        color = "#d62728" if is_positive else "#2ca02c"
        st.markdown("---")
        col1, col2, col3 = st.columns([2.5, 2, 2])
        with col1:
            st.markdown(f"""
            <div style="font-size: 1.2em; font-weight: bold; line-height: 1.5;">{name}</div>
            <span style="background-color: #333; color: #EEE; padding: 2px 6px; border-radius: 5px; font-size: 0.8em;">Êùø {code}</span>
            """, unsafe_allow_html=True)
        with col2:
            st.plotly_chart(create_sparkline(history, is_positive), use_container_width=True,
                            config={'displayModeBar': False})
        with col3:
            st.markdown(f"""
            <div style="text-align: right; font-family: 'Helvetica Neue', sans-serif;">
                <div style="font-size: 1.3em; font-weight: 600;">{price:.2f}</div>
                <div style="font-size: 1.3em; font-weight: 600; color:{color};">{change_rate:+.2f}%</div>
            </div>
            """, unsafe_allow_html=True)


# --- ‰∏ªÈÄªËæë ---
data_to_display = fetch_data()
display_dashboard(data_to_display)
if is_trading_time():
    st.rerun()